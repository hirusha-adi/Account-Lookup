# Form implementation generated from reading ui file '.\MainWindow.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
import sys
from PyQt6.QtWidgets import QProgressDialog
from PyQt6.QtCore import Qt

import requests
import json
from concurrent.futures import ThreadPoolExecutor
from urllib.parse import urlparse


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        
        _translate = QtCore.QCoreApplication.translate
        
        # MainWindow setup
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(381, 491)
        MainWindow.setWindowTitle(_translate("MainWindow", "Account Lookup"))

        # Central Widget setup
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Title Label setup
        self.label_title = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_title.setGeometry(QtCore.QRect(90, 10, 191, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_title.setFont(font)
        self.label_title.setObjectName("label_title")
        self.label_title.setText(_translate("MainWindow", "Account Lookup"))

        # Search Group setup
        self.group_search = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.group_search.setGeometry(QtCore.QRect(10, 60, 361, 71))
        self.group_search.setObjectName("group_search")
        self.group_search.setTitle(_translate("MainWindow", "Search"))

        # Username Label setup
        self.label_username = QtWidgets.QLabel(parent=self.group_search)
        self.label_username.setGeometry(QtCore.QRect(20, 30, 61, 31))
        self.label_username.setObjectName("label_username")
        self.label_username.setText(_translate("MainWindow", "Username:"))

        # Username TextEdit setup
        self.txt_username = QtWidgets.QTextEdit(parent=self.group_search)
        self.txt_username.setGeometry(QtCore.QRect(80, 30, 131, 31))
        self.txt_username.setObjectName("txt_username")

        # Search Button setup
        self.btn_search = QtWidgets.QPushButton(parent=self.group_search)
        self.btn_search.setGeometry(QtCore.QRect(220, 30, 75, 31))
        self.btn_search.setObjectName("btn_search")
        self.btn_search.setText(_translate("MainWindow", "Search"))

        # Clear Button setup
        self.btn_clear = QtWidgets.QPushButton(parent=self.group_search)
        self.btn_clear.setGeometry(QtCore.QRect(300, 30, 31, 31))
        self.btn_clear.setObjectName("btn_clear")
        self.btn_clear.setText(_translate("MainWindow", "X"))

        # Table Widget setup
        self.table_widget = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.table_widget.setGeometry(QtCore.QRect(10, 140, 361, 281))
        self.table_widget.setObjectName("table_widget")
        self.table_widget.setColumnCount(3)
        self.table_widget.setRowCount(0)
        item = self.table_widget.horizontalHeaderItem(0)

        # Table Headers setup
        item = QtWidgets.QTableWidgetItem()
        self.table_widget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_widget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_widget.setHorizontalHeaderItem(2, item)
        
        item.setText(_translate("MainWindow", "ID"))
        item = self.table_widget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Platform Name"))
        item = self.table_widget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Status"))

        # Labels setup - Bottom
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 430, 71, 16))
        self.label_3.setObjectName("label_3")
        self.label_3.setText(_translate("MainWindow", "Exit"))

        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(260, 430, 111, 20))
        self.label_4.setObjectName("label_4")
        self.label_4.setText(_translate("MainWindow", "Made by @hirushaadi"))

        # Set Central Widget
        MainWindow.setCentralWidget(self.centralwidget)

        # Menu Bar setup
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 381, 21))
        self.menubar.setObjectName("menubar")

        # Menu setup
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        
        self.menuGuide = QtWidgets.QMenu(parent=self.menubar)
        self.menuGuide.setObjectName("menuGuide")
        self.menuGuide.setTitle(_translate("MainWindow", "Help"))
        
        self.menuAbout = QtWidgets.QMenu(parent=self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuAbout.setTitle(_translate("MainWindow", "About"))

        # Set Menu Bar
        MainWindow.setMenuBar(self.menubar)

        # Status Bar setup
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # Action setup
        self.actionSearch = QtGui.QAction(parent=MainWindow)
        self.actionSearch.setObjectName("actionSearch")
        self.actionSearch.setText(_translate("MainWindow", "Search"))

        self.actionClear = QtGui.QAction(parent=MainWindow)
        self.actionClear.setObjectName("actionClear")
        self.actionClear.setText(_translate("MainWindow", "Clear"))

        self.actionExit = QtGui.QAction(parent=MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(sys.exit)  # Connect Exit action to sys.exit
        self.actionExit.setText(_translate("MainWindow", "Exit"))

        self.actionGuide = QtGui.QAction(parent=MainWindow)
        self.actionGuide.setObjectName("actionGuide")
        self.actionGuide.setText(_translate("MainWindow", "Guide"))

        self.actionHow_it_works = QtGui.QAction(parent=MainWindow)
        self.actionHow_it_works.setObjectName("actionHow_it_works")
        self.actionHow_it_works.setText(_translate("MainWindow", "How it works?"))

        self.actionLicense = QtGui.QAction(parent=MainWindow)
        self.actionLicense.setObjectName("actionLicense")
        self.actionLicense.setText(_translate("MainWindow", "License"))

        self.actionCredits = QtGui.QAction(parent=MainWindow)
        self.actionCredits.setObjectName("actionCredits")
        self.actionCredits.setText(_translate("MainWindow", "Credits"))

        self.actionContribute = QtGui.QAction(parent=MainWindow)
        self.actionContribute.setObjectName("actionContribute")
        self.actionContribute.setText(_translate("MainWindow", "Contribute"))

        # Add actions to menus
        self.menuFile.addAction(self.actionSearch)
        self.menuFile.addAction(self.actionClear)
        self.menuFile.addAction(self.actionExit)

        self.menuGuide.addAction(self.actionGuide)
        self.menuGuide.addAction(self.actionHow_it_works)
        self.menuGuide.addAction(self.actionLicense)
        self.menuGuide.addAction(self.actionCredits)
        self.menuGuide.addAction(self.actionContribute)

        # Add menus to menubar
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuGuide.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        # something... idk
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def update_table(self, found_accounts):
        self.table_widget.setRowCount(0)  # clear table

        for account_info in found_accounts:
            row_position = self.table_widget.rowCount()
            self.table_widget.insertRow(row_position)

            # populate
            self.table_widget.setItem(row_position, 0, QtWidgets.QTableWidgetItem(str(account_info["id"])))
            self.table_widget.setItem(row_position, 1, QtWidgets.QTableWidgetItem(account_info["name"]))
            self.table_widget.setItem(row_position, 2, QtWidgets.QTableWidgetItem(account_info["exists"]))


found_accounts = []

def extract_main_url(input_url):
    try:
        parsed_url = urlparse(input_url)
        main_url = f"{parsed_url.scheme}://{parsed_url.netloc}/"
        return main_url
    except:
        return input_url 
    
def check_username_on_site(site, username, session):
    uri = site.get("uri_check")
    method = site.get("method", "GET")
    payload = site.get("post_body", {})
    headers = site.get("headers", {})

    try:
        if method == "GET":
            final_url = uri.format(account=username)
            response = session.get(final_url, headers=headers, timeout=10)
        elif method == "POST":
            final_url = uri
            response = session.post(final_url, data=payload, headers=headers, timeout=10)

        response.raise_for_status()

        if response.status_code == site["e_code"] and site["e_string"] in response.text:
            account_info = {
                "id": len(found_accounts) + 1,
                "username": username,
                "name": site.get("name"),
                "url_main": extract_main_url(final_url),
                "url_user": final_url,
                "exists": "Claimed",
                "http_status": response.status_code,
                "response_time_s": f"{response.elapsed.total_seconds():.3f}",
            }
            found_accounts.append(account_info)
            return True
        elif response.status_code == site["m_code"] and site["m_string"] in response.text:
            return False

    except requests.exceptions.RequestException as req_err:
        print(f"Error occurred for {site['name']} - {req_err}")

    return False

def check_username(username):
    global found_accounts
    found_accounts = []

    with open('wmn-data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    total_sites = len(data["sites"])
    progress_dialog = QProgressDialog(f"Searching for {username}...", "Cancel", 0, total_sites)
    progress_dialog.setWindowModality(Qt.WindowModality.WindowModal)
    progress_dialog.setWindowTitle("Searching")

    def update_progress(i):
        progress_dialog.setValue(i)
        app.processEvents()

    with ThreadPoolExecutor() as executor, requests.Session() as session:
        futures = [executor.submit(check_username_on_site, site, username, session) for site in data["sites"]]
        for i, future in enumerate(futures):
            if progress_dialog.wasCanceled():
                break
            result = future.result()
            update_progress(i + 1)

            if result:
                ui.update_table(found_accounts)

    progress_dialog.setValue(total_sites)
    progress_dialog.close()

    if not any(found_accounts):
        print(f"Username {username} not found on any site.")
        
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)

ui.btn_search.clicked.connect(lambda: check_username(ui.txt_username.toPlainText()))

MainWindow.show()
sys.exit(app.exec())